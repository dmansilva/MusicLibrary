import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.TreeSet;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;





public class MusicLibrary {
	
	/*
	 * a class that stores the entire library and has several complex data structures
	 * and its data members
	 * - store each song into the library, (addSong) method, very similar to MusicLibrary.java
	 */
	
	protected TreeMap<String, TreeSet<Song>> byArtist;
	protected TreeMap<String, TreeSet<Song>> byTitle;
	protected TreeMap<String, TreeSet<String>> byTag;
	protected TreeMap<String, TreeSet<Song>> byTags;
	protected TreeMap<String, Song> uniqueTrackId;
	
	public MusicLibrary () {
		
		this.byArtist = new TreeMap<>();
		this.byTitle = new TreeMap<>();
		this.byTag = new TreeMap<>();
		this.byTags = new TreeMap<>();
		this.uniqueTrackId = new TreeMap<>();
		
	}
	
	/*
	 * Adds the song to their proper data structure whether it is adding it to the byArtist, byTitle, or byTag's TreeMap 
	 */
	
	public void addSong(Song song) {
		
		String artist_check = song.getArtist();
		
		if (!this.byArtist.containsKey(artist_check)) {
			this.byArtist.put(artist_check, new TreeSet<Song>(new ByArtistComparator()));
		}
		
		this.byArtist.get(artist_check).add(song);
		
		String title_check = song.getTitle();
		
		if (!this.byTitle.containsKey(title_check)) {
			this.byTitle.put(title_check, new TreeSet<Song>(new ByTitleComparator()));
		}
		
		this.byTitle.get(title_check).add(song);
		
		// adding Songs by their trackId
		
		this.uniqueTrackId.put(song.getTrackId(), song);
		

		for (int i = 0; i < song.getTags().size(); i++) {
			if (!this.byTag.containsKey(song.getTags().get(i))) {				
				this.byTag.put(song.getTags().get(i), new TreeSet<String>());	
				this.byTag.get(song.getTags().get(i)).add(song.getTrackId());	
			} else { 													
				this.byTag.get(song.getTags().get(i)).add(song.getTrackId());	
			}
			
			if (!this.byTags.containsKey(song.getTags().get(i))) {
				this.byTags.put(song.getTags().get(i), new TreeSet<Song>(new ByTagsComparator()));
				this.byTags.get(song.getTags().get(i)).add(song);
			}
			else {
				this.byTags.get(song.getTags().get(i)).add(song);
			}
			
		}
		
	}
	
	
	/*
	 * outputByArtist calls the outputArtistOrTitle method by passing in byArtist and path 
	 */
	
	public void outputByArtist(Path path) {
		
		outputArtistOrTitle(byArtist, path);
		

	}
	
	/*
	 * outputByTitle calls the outputArtistOrTitle method by passing in byTitle and path
	 */
	
	public void outputByTitle(Path path) {
		
		outputArtistOrTitle(byTitle, path);
		
	}
	
	/*
	 * outputArtistOrTitle takes in a TreeMap and path and outputs to a file in the specified path passed in. It 
	 * checks which treeMap is passed in and outputs accordingly
	 */
	
	private void outputArtistOrTitle(TreeMap<String, TreeSet<Song>> treeMaps, Path path) {
		
		try(PrintWriter writer = new PrintWriter(Files.newBufferedWriter(path, Charset.forName("UTF-8")))) {
			
			
			for (String key : treeMaps.navigableKeySet()) {
				TreeSet<Song> songs = treeMaps.get(key);
				
				java.util.Iterator<Song> itr = songs.iterator();
				
				while (itr.hasNext()) {
					Song eachSong = itr.next();
					if (treeMaps.equals(byArtist)) {
						String title = eachSong.getTitle();
						writer.println(key + " - " + title);
					}
					else if (treeMaps.equals(byTitle)) {
						String artist = eachSong.getArtist();
						writer.println(artist + " - " + key);
					}
				}
				
			}
		} catch (IOException e) {
			
			System.out.println("Invalid Output path");
		}
	}
	
	
	/*
	 * outputByTag takes in the output path and outputs properly to that specified path using a printWriter 
	 * for the byTag.
	 */
	
	public void outputByTag(Path path) {
		
		try(PrintWriter writer = new PrintWriter(Files.newBufferedWriter(path, Charset.forName("UTF-8")))) {
			
			for (String tag : this.byTag.navigableKeySet()) {
				TreeSet<String> stringOfIds = this.byTag.get(tag);
				
				java.util.Iterator<String> itr = stringOfIds.iterator();
				
				StringBuffer allTrackIds = new StringBuffer();
				
				while (itr.hasNext()) {
					
					allTrackIds.append(" " + itr.next());
					
				}
				writer.println(tag + ":" + allTrackIds.toString());
			}
		} catch (IOException e) {
			System.out.println("Invalid Output path");
		}
	}
	
	/*
	 * jSonOutput method takes in JSONObject that was extracted from the searchInput. 
	 * It return the JSONObject with the content and in the format you want for your output file.
	 */
	
	public JSONObject jSonOutput(JSONObject input) {
		
		JSONObject obj = new JSONObject();
		
		if (input.containsKey("searchByArtist")) {
			JSONArray valueAllArtists = new JSONArray();
			JSONArray allArtist = (JSONArray) input.get("searchByArtist");
			for (int i = 0; i < allArtist.size(); i++) {
				if (this.byArtist.containsKey(allArtist.get(i))) {
					JSONObject eachArtist = new JSONObject();
					eachArtist.put("artist", allArtist.get(i));
					eachArtist.put("similars", searchByArtist((String) allArtist.get(i)));
					valueAllArtists.add(eachArtist);
				}
				else {
					JSONObject eachArtist = new JSONObject();
					eachArtist.put("artist", allArtist.get(i));
					eachArtist.put("similars", new JSONArray());
					valueAllArtists.add(eachArtist);
				}
			}
			
			obj.put("searchByArtist", valueAllArtists);
		}
		
		if (input.containsKey("searchByTitle")) {
			System.out.println("here?");
			JSONArray valueAllTitle = new JSONArray();
			JSONArray allTitle = (JSONArray) input.get("searchByTitle");
			for (int i = 0; i < allTitle.size(); i++) {
				System.out.println("allTitle checks :" + allTitle.get(i));
				if (this.byTitle.containsKey(allTitle.get(i))) {
					JSONObject eachTitle = new JSONObject();
					eachTitle.put("similars", searchByTitle((String) allTitle.get(i)));
					eachTitle.put("title", allTitle.get(i));
					valueAllTitle.add(eachTitle);
					System.out.println("check check");
				}
				else {
					JSONObject eachTitle = new JSONObject();
					eachTitle.put("similars", new JSONArray());
					eachTitle.put("title", allTitle.get(i));
					valueAllTitle.add(eachTitle);
					System.out.println("mic check yo");
				}
			}
			
			obj.put("searchByTitle", valueAllTitle);
		}
		
		if (input.containsKey("searchByTag")) {
			JSONArray valueAllTag = new JSONArray();
			JSONArray allTag = (JSONArray) input.get("searchByTag");
			for (int i = 0; i < allTag.size(); i++) {
				if (this.byTag.containsKey(allTag.get(i))) {
					JSONObject eachTag = new JSONObject();
					eachTag.put("similars", searchByTag((String) allTag.get(i)));
					eachTag.put("tag", allTag.get(i));
					valueAllTag.add(eachTag);
				}
			}
			
			obj.put("searchByTag", valueAllTag);
		}
		return obj;
	}
	
	/*
	 * searchByArtist method takes in a string that is the artist we would like to search by.
	 * We then output a JSONArray of the similar songs to that artist using the toJson method
	 * from the Song class.
	 */
	
	public JSONArray searchByArtist(String artist) {
			
		JSONArray valueInJSON = new JSONArray();
		
		if (this.byArtist.get(artist) != null) {
			TreeSet<Song> songs = this.byArtist.get(artist);
			for (Song song : songs) {
				ArrayList<String> similarList = song.getSimilars();
				if (similarList.size() > 0) {
					for (String similarSong : similarList) {
						if (uniqueTrackId.containsKey(similarSong)) {
							if (!valueInJSON.contains(this.uniqueTrackId.get(similarSong).toJson())) {
								valueInJSON.add(this.uniqueTrackId.get(similarSong).toJson());
							}
							//valueInJSON.add(this.uniqueTrackId.get(similarSong).toJson());
						}
						else {
							//System.out.println("are there songs that are not in uniqueTrackId treeMap");
						}
					}
				}
				else {
					valueInJSON.add(new JSONArray());
				}
			}
			return valueInJSON;
		}
		else {
			return null;
		}
		
	}
	
	public JSONArray searchByTitle(String title) {
		System.out.println("do i even get here yo?");
		
		JSONArray valueInJSON = new JSONArray();
		
		if (this.byTitle.get(title) != null) {
			TreeSet<Song> songs = this.byTitle.get(title);
			
			for (Song song : songs) {
				ArrayList<String> similarList = song.getSimilars();
				if (similarList.size() > 0) {
					for (String similarSong : similarList) {
						if (uniqueTrackId.containsKey(similarSong)) {
							valueInJSON.add(this.uniqueTrackId.get(similarSong).toJson());
						}
					}
				}
//				else {
//					valueInJSON.add(new JSONArray());
//				}
			}
			System.out.println("or do i end up here?");
			return valueInJSON;
		}
		else {
			System.out.println("do i end up here?");
			return null;
		}
		
	}
	
	public JSONArray searchByTag(String tag) {
		
		JSONArray valueInJSON = new JSONArray();
		
		TreeSet<Song> songs = this.byTags.get(tag);
		
		for (Song song : songs) {
			
			valueInJSON.add(song.toJson());
		}
		
		return valueInJSON;
	}
	

}
